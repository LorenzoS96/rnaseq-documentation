name: nf-core CI
# This workflow runs the pipeline with the minimal test dataset to check that it completes without any syntax errors
on:
  push:
    branches:
      - dev
  pull_request:
  release:
    types: [published]

env:
  NXF_ANSI_LOG: false
  NFT_VER: "0.8.4"
  NFT_WORKDIR: "~"
  NFT_DIFF: "pdiff"
  NFT_DIFF_ARGS: "--line-numbers --expand-tabs=2"

concurrency:
  group: "${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true
jobs:
  star_salmon:
    name: Test STAR Salmon with workflow parameters
    if: ${{ (github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'nf-core/rnaseq')) && !contains(github.event.head_commit.message, '[ci fast]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parameters:
          - "--skip_qc"
          - "--skip_trimming"
          - "--gtf false"
          - "--star_index false"
          - "--transcript_fasta false"
          - "--min_mapped_reads 90"
          - "--with_umi"
          - "--with_umi --skip_trimming"
          - "--remove_ribo_rna --skip_qualimap"
          - "--bam_csi_index"
          - "--save_align_intermeds --save_reference"
          - "--featurecounts_group_type false"
          - "--trimmer fastp"

    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v4

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1.5

      - name: Run pipeline with STAR and various parameters
        run: |
          nextflow run ${GITHUB_WORKSPACE} -profile test,docker --aligner star_salmon ${{ matrix.parameters }} --outdir ./results

  star_rsem:
    name: Test STAR RSEM with workflow parameters
    if: ${{ (github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'nf-core/rnaseq')) && !contains(github.event.head_commit.message, '[ci fast]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parameters:
          - "--skip_qc"
          - "--rsem_index false"
    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v4

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1.5

      - name: Run pipeline with RSEM STAR and various parameters
        run: |
          nextflow run ${GITHUB_WORKSPACE} -profile test,docker --aligner star_rsem ${{ matrix.parameters }} --outdir ./results

  hisat2:
    name: Test HISAT2 with workflow parameters
    if: ${{ (github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'nf-core/rnaseq')) && !contains(github.event.head_commit.message, '[ci fast]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parameters:
          - "--skip_qc"
          - "--hisat2_index false"
    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v4

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1.5

      - name: Run pipeline with HISAT2 and various parameters
        run: |
          nextflow run ${GITHUB_WORKSPACE} -profile test,docker --aligner hisat2 ${{ matrix.parameters }} --outdir ./results

  pseudo:
    name: Test Pseudoaligners with workflow parameters
    if: ${{ (github.event_name != 'push' || (github.event_name == 'push' && github.repository == 'nf-core/rnaseq')) && !contains(github.event.head_commit.message, '[ci fast]') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        parameters:
          - "--pseudo_aligner salmon --skip_qc"
          - "--pseudo_aligner salmon --skip_alignment --skip_pseudo_alignment"
          - "--pseudo_aligner salmon --salmon_index false --transcript_fasta false"
          - "--pseudo_aligner kallisto --skip_qc"
          - "--pseudo_aligner kallisto --skip_alignment --skip_pseudo_alignment"
          - "--pseudo_aligner kallisto --kallisto_index false --transcript_fasta false"
    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v4

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1.5

      - name: Run pipeline with Salmon or Kallisto and various parameters
        run: |
          nextflow run ${GITHUB_WORKSPACE} -profile test,docker ${{ matrix.parameters }} --outdir ./results

  nf-test-changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changed_files.outputs.any_modified }}
      tags: ${{ steps.list.outputs.tags }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: tj-actions/changed-files@v42
        id: changed_files
        with:
          dir_names: "true"
          output_renamed_files_as_deleted_and_added: "true"
          # Define list of additional rules for testing paths
          # Mostly, we define additional 'pipeline' or 'all' tests here
          files_yaml: |
            ".":
              - .github/workflows/**
              - nf-test.config
              - nextflow.config
            tests:
              - assets/*
              - bin/*
              - conf/*
              - main.nf
              - nextflow_schema.json

          files_ignore: |
            .git*
            .gitpod.yml
            .prettierignore
            .prettierrc.yml
            **.md
            **.png
            modules.json
            pyproject.toml
            tower.yml

      - name: print-changed-dirs
        run: |
          echo ${{ steps.changed_files.outputs.any_modified }}
          echo ${{ steps.changed_files.outputs.all_changed_files }}
          echo ${{ steps.changed_files.outputs.changed_keys }}

      - name: nf-test list tags
        id: list
        if: ${{ steps.changed_files.outputs.any_modified }}
        run: |
          echo tags=$(python \
            .github/python/find_changed_files.py \
            -t pipeline workflow process \
            -p ${{ steps.changed_files.outputs.all_changed_files }} ${{ steps.changed_files.outputs.changed_keys }} \
          ) >> $GITHUB_OUTPUT

      - name: print-test-tags
        run: |
          echo ${{ steps.list.outputs.tags }}

  test:
    name: ${{ matrix.tags }} ${{ matrix.profile }} NF-${{ matrix.NXF_VER }}
    needs: [nf-test-changes]
    if: needs.nf-test-changes.outputs.changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        NXF_VER:
          # - "latest-everything"
          - "23.04.0"
        tags: ["${{ fromJson(needs.nf-test-changes.outputs.tags) }}"]
        profile:
          - "docker"
    steps:
      - name: Check out pipeline code
        uses: actions/checkout@v4

      - name: Setup Nextflow
        uses: nf-core/setup-nextflow@v1.5
        with:
          version: "${{ matrix.NXF_VER }}"

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install pdiff to see diff between nf-test snapshots
        run: |
          python -m pip install --upgrade pip
          pip install pdiff

      - name: Cache nf-test installation
        id: cache-software
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/bin/nf-test
            /home/runner/.nf-test/nf-test.jar
          key: ${{ runner.os }}-${{ env.NFT_VER }}-nftest

      - name: Install nf-test
        if: steps.cache-software.outputs.cache-hit != 'true'
        run: |
          wget -qO- https://code.askimed.com/install/nf-test | bash
          sudo mv nf-test /usr/local/bin/

      - name: Run nf-test
        run: |
          nf-test test --verbose --tag ${{ matrix.tags }} --profile "+${{ matrix.profile }}" --junitxml=test.xml --tap=test.tap

      - uses: pcolby/tap-summary@v1
        with:
          path: >-
            test.tap

      - name: Output log on failure
        if: failure()
        run: |
          sudo apt install bat > /dev/null
          batcat --decorations=always --color=always ${{ github.workspace }}/.nf-test/tests/*/meta/nextflow.log

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: test.xml

  confirm-pass:
    runs-on: ubuntu-latest
    # needs: [test, star_salmon, star_rsem, hisat2, pseudo]
    needs: [test]
    if: always()
    steps:
      - name: All tests ok
        if: ${{ success() }}
        run: exit 0
      - name: One or more tests failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

      - name: debug-print
        if: always()
        run: |
          echo "toJSON(needs) = ${{ toJSON(needs) }}"
          echo "toJSON(needs.*.result) = ${{ toJSON(needs.*.result) }}"
